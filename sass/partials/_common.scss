@use 'sass:color';
@use 'sass:list';
@use 'sass:selector';
@use 'sass:string';

$bgr-1: #6a8b83;
$bgr-2: #466e64;

$gray-1: #999;
$gray-2: #e0e0e0;

$alpha-shadow: 0.125;

$font-std: "barlow-semi-condensed", sans-serif;
$font-header: "aboreto", sans-serif;
$font-article: "lora", serif;


@function slice-list($list, $start, $end) {
	$new-list: ();
	@if $end < 0 { $end: list.length($list) + 1 + $end }
	@for $n from $start through $end {
		$new-list: list.append($new-list, list.nth($list, $n));
	}
	@return $new_list;
}
@function starts-with($str, $match-str) {
	@return string.slice($str, 1, string.length($match-str)) == $match-str;
}
@mixin position-relatively { // Assumes only one selector (not comma-seperated list)
	@each $sel in & {
		$last-compound-sel: list.nth($sel, -1);
		$last-simple-sel: list.nth(selector.simple-selectors($last-compound-sel), -1);
		@if starts-with($last-simple-sel, "::") {
			$new-sel: list.set-nth($sel, -1, string.slice($last-compound-sel, 1, -1 - string.length($last-simple-sel)));
			@at-root #{$new-sel} {
				position: relative;
			}
		} @else {
			$ancestry: slice-list($sel, 1, -2);
			$me: list.nth($sel, -1);
			@at-root #{$ancestry} :has(> #{$me}), #{$ancestry}:has(> #{$me}) {
				position: relative;
			}
		}
	}

	position: absolute;
}

@mixin font-size($font-size, $center-line: false, $fix-descenders: false) {
	font-size: $font-size;
	@if $center-line {
		height: $font-size;
		line-height: $font-size;
		@if $fix-descenders {
			margin-bottom: calc($font-size * -0.25);
		}
	}
}

// I could probably find some better way to do this without so much repetition
@mixin font-std-1($center-line: false) {
	font-family: $font-std;
	@include font-size(1.3rem, $center-line, true);
	font-weight: 400;
}

@mixin font-std-2($center-line: false) {
	font-family: $font-std;
	@include font-size(0.95rem, $center-line, true);
	font-weight: 400;
}

@mixin font-std-3($center-line: false) {
	font-family: $font-std;
	@include font-size(2rem, $center-line, true);
	font-weight: 500;
}

@mixin font-article-big($center-line: false) {
	font-family: $font-header;
	@include font-size(1.5rem, $center-line, true);
	font-weight: 600;
}

@mixin font-article($center-line: false) {
	font-family: $font-article;
	@include font-size(1.1rem, $center-line, true);
	font-weight: 400;
}

@mixin font-article-small($center-line: false) {
	font-family: $font-article;
	@include font-size(0.95rem, $center-line, true);
	font-weight: 400;
}


@mixin box-shadow($alpha, $size) {
	box-shadow: 0 0 calc($size * 2) $size color.change(black, $alpha: $alpha);
}

// @mixin hover-pop($scale: 120%) {
// 	&:hover {
// 		scale: $scale;
// 	}
// }

@mixin light-up($color, $default-alpha, $hover-alpha) {
	color: color.change($color, $alpha: $default-alpha);
	&:hover { color: color.change($color, $alpha: $hover-alpha); }
}

@mixin expand-area($size) {
	&::after {
		content: "";
		@include position-relatively;
		width: 100%; height: 100%;
		top: -$size; left: -$size;
		padding: $size;
	}
}


@mixin spread-flex($split-equally: false, $spread-children: false) {
	display: flex;

	@if $split-equally {
		> * { 
			flex: 1 0 0%;
			min-width: 0;
			min-height: 0;
		}
	} @else {
		justify-content: space-between;
	}

	> * {
		@if $spread-children {
			display: flex;
			align-items: center;
			gap: 1rem;

			justify-content: center;
			&:first-child { justify-content: left; }
			&:last-child { justify-content: right; }
		}
	}
}

@mixin flex-hr($type, $style, $margin: 1rem) {
	flex: 0 0 0; 
	align-self: stretch;

	border: none;
	@if $type == row {
		border-left: $style;
		margin: $margin 0;
	} @else if $type == column {
		border-top: $style;
		margin: 0 $margin;
	}
}